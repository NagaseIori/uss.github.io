[{"categories":["others"],"content":"自用。\n不提供推荐。\n不提供P站ID。\n意见主观。\n不专业。\n不可爱的画师不会记载。\n画很多男孩子的画师也不会记载。\n也许会长期更新。\n可能涉及 H 内容。\n如果有错误欢迎指正。\n香川悠作 百合绘师？\n笔下的女孩子都很有活力而且很可爱，互动夸张且有趣。\n背景的光影非常自然，有种夏日感。\n美好而安定的日常感。\nNon-H 画师。\nﾌﾞﾚｴﾄﾞ 色调有很明显的个人风格，偏粉。画风也容易识别。\n笔下可爱、贫乳、娇小的女孩子很多。画得女孩子都特别特别可爱。因此大部分作品我都收藏了。\n超级可爱。超级超级可爱。尤其是很喜欢这种细腻偏暖的色调。\n画 H 的内容不少，不过质量也很高，仍然特别特别可爱。\n里个人存档处 国人绘师。\n感觉更偏艺术而非日本插画风格。宏大的场景，丰富的想象，擅长描绘奇妙的景象和精细而壮观的背景，偏科幻。\n笔下的女孩子也描绘的很细腻，华丽，很好看。\n每幅画的具体风格都很不一样且鲜明。\n画 H 的内容不少，喜欢以 Miku 的调教为主题，含有 machinery 和 rbq 元素较多，也很科幻。再说下去会被 ban 所以到此为止无可奉告。\nひみつ Himitsu 国人绘师。\n对捆绑题材非常执着。上色非常细腻（包括光影、水、肌肤和白丝），被捆绑的女孩子形态和表情都非常可爱，画作受到广泛欢迎。是我很喜欢的画师。\n画作主题包含碧蓝航线、Fate等。\n由于题材的特殊性，画作内容不可避免地大部分为 H 相关。同时作为本子绘师。\n在国内有 weibo 和 bilibili 账号，经常在b站直播绘画。\n幻想绘风 国人绘师。\n早、中期以绘画风景和女孩子（东方）为主。在绘画天空和云朵上，色彩的运用非常惊艳。绘画的风景图都非常美丽，色彩鲜艳，常使用厚涂风格。每年都会画“最後の夕焼け”为主题的画作。\n后期以绘画女孩子（非东方、铁路拟人）和风景为主。色调偏暖、灰，特色鲜明。\n是我最喜欢的画师之一。也是我曾经梦想过成为的“又会画风景又会画可爱的女孩子，尤其是云朵和天空画得特别好看”的画师。\nNon-H 画师。\nGYARI VOCALOID Producer，周刊变长元凶，万恶之源P，前期jazz和长曲、小剧场p主，后期鬼畜曲p主（悲）。喜欢用VOICEROID。\n你们都应该去听一听 GYARI 写的歌，甚至还能同时做作业.jpg\n在 pixiv 上有账号，绘画力也越来越高了（赞赏）。\n在 Youtube 上也很受欢迎的P主。\nLpip 韩国绘师。\n笔触轻柔，有种薄纱覆盖的透明感，画作和笔下的女孩子都有很鲜明的特色，常有水雾般的朦胧和温柔感。是pixiv很受欢迎的画师之一，常屠榜。\n笔下常绘 VOCALOID 和 Miku 相关，以绘画美丽的女孩子为主。\nNon-H 画师。\nlitsvn 国人画师。\n笔下的女孩子画风极具特色，活力的kawaii感。识别度很高。色调风格与ﾌﾞﾚｴﾄﾞ相近，但是上色相对更加鲜艳。眼睛的颜色非常迷人。是我很喜欢的画师之一。\n给bilibili world提供过一次banner，某次上b站首页看到的，画风非常相近？\n偶尔画 H 相关，其中偶尔触手相关，这几张的女孩子都很可爱。\n似乎巨乳角色也不少。\n","oriTitle":"Favorite Pixiv Artists","tags":["Pixiv","VOCALOID"],"title":"Favorite Pixiv Artists","uri":"/posts/favorite-pixiv-artists/"},{"categories":["solution"],"content":"弄了一晚上，几篇博客交换看才看懂。\n可能也是因为分心了的缘故。\nSolution 将整棵树分为 $k+1$ 个联通块，对每个联通块找直径，然后直径端点连成一条链一定是最优解。\n考虑转化问题，求树上 $k+1$ 条不相交链的最大权和。\n设计状态。考虑一个点的度数只可能为 $0/1/2$ 。令 $f_{i, j, k}$ 为第 $i$ 个点，度数为 $j$ ，用了 $k$ 条链的子树最优解。\n再具体阐述状态。$f_{i, 0}$ 代表这个点度数为 $0$ ，即在最终的方案中它并不属于直径，因此不占用任何链的个数也不提供任何贡献。 $f_{i, 1}$ 的状态正常。 $f_{i, 2}$ 代表这个点的度数为 $2$ 。那么如果我们想要一个单点成为直径中的一条链，我们就假设是 $i$ 向自己连了自环，度数为 $2$ 且占用了一条链的数目。\n那么初始化也就呼之欲出了：$f_{i, 0, 0}=f_{i, 2, 1}=0$ ，其余置为 $-\\infty$ 。\n转移不难。\n通过观察（打表）发现对于使用链数为 $k$ 的最优解呈凸函数，使用 凸优化dp 来去除 $k$ 的限制。\n注意我们是对每条链产生的贡献减去斜率而不是对每条边。\n那么初始的dp去除第三维来做就行了。\n但是凸函数可能会出现你要找的点和前后两点处于同一直线。那么此时应当二分到该直线的斜率，并使用斜率和 $k$ 来直接求出 $k$ 的最优值。\nCode // Code by ajcxsu // Problem: linke kate shu #include\u0026lt;bits/stdc++.h\u0026gt; #define INF (0x7fffffff) using namespace std; template\u0026lt;typename T\u0026gt; inline void gn (T \u0026amp;x) { char ch=getchar(), pl=0; x=0; while(!isdigit(ch)) pl=ch=='-', ch=getchar(); while(isdigit(ch)) x=x*10+ch-'0', ch=getchar(); x*=pl?-1:1; } template\u0026lt;typename T, typename ...Args\u0026gt; inline void gn (T \u0026amp;x, Args \u0026amp;...args) { gn(x), gn(args...); } const int N=3e5+10, M=N\u0026lt;\u0026lt;1; typedef long long ll; struct Data { ll x; int k; friend bool operator \u0026lt; (const Data \u0026amp;a, const Data \u0026amp;b) { return a.x==b.x?(a.k\u0026lt;b.k):a.x\u0026lt;b.x; } Data operator + (const Data \u0026amp;b) { return {x+b.x, k+b.k}; } } f[3][N], tmp[3]; int h[N], to[M], nexp[M], p=1; ll W[M], rw[M]; inline void ins(int a, int b, int w) { nexp[p]=h[a], h[a]=p, to[p]=b, W[p]=w, p++; } ll delta; void dfs(int x, int fr) { for(int u=h[x];u;u=nexp[u]) if(to[u]!=fr) { dfs(to[u], x); for(int i=0; i\u0026lt;3; i++) tmp[i]={-(1ll\u0026lt;\u0026lt;60), 0x3f3f3f3f}; for(int i=0; i\u0026lt;3; i++) tmp[0]=max(tmp[0], f[0][x]+f[i][to[u]]); tmp[1]=max(f[0][x]+f[0][to[u]]+(Data){W[u]-delta, 1}, f[0][x]+f[1][to[u]]+(Data){W[u], 0}); for(int i=0; i\u0026lt;3; i++) tmp[1]=max(tmp[1], f[1][x]+f[i][to[u]]); tmp[2]=max(f[1][x]+f[0][to[u]]+(Data){W[u], 0}, f[1][x]+f[1][to[u]]+(Data){W[u]+delta, -1}); for(int i=0; i\u0026lt;3; i++) tmp[2]=max(tmp[2], f[2][x]+f[i][to[u]]); for(int i=0; i\u0026lt;3; i++) f[i][x]=tmp[i]; } } int n; int check(ll v) { delta=v; for(int i=1; i\u0026lt;=n; i++) f[0][i]={0, 0}, f[1][i]={-(1ll\u0026lt;\u0026lt;60), 0x3f3f3f3f}, f[2][i]={-v, 1}; dfs(1, 0); return max({f[0][1], f[1][1], f[2][1]}).k; } int main() { int k; gn(n), gn(k); k++; int u, v, w; ll l=0, r=0, mid, ans=-INF; for(int i=0; i\u0026lt;n-1; i++) gn(u, v, w), ins(u, v, w), ins(v, u, w), r+=abs(w); l=-r; memcpy(rw, W, sizeof(W)); while(l\u0026lt;=r) { mid=(l+r)\u0026gt;\u0026gt;1; if(check(mid)\u0026gt;=k) l=mid+1, ans=mid; else r=mid-1; } check(ans); printf(\u0026quot;%lld\\n\u0026quot;, max({f[0][1], f[1][1], f[2][1]}).x+ans*k); return 0; } ","oriTitle":"LP4383 林克卡特树","tags":["凸优化DP"],"title":"LP4383 林克卡特树","uri":"/posts/sol-luogu-4383/"},{"categories":["solution"],"content":"一道不错相对简单的题目。\nSolution 很大胆的想法。考虑以子树dp，然后一条链大力拉下来枚举链底部求贡献。\n那么对于每棵子树求最优的链底。\n用线段树维护。考虑点上移，链底贡献的变化量。\n重链贡献中有 $\\log$ 的存在，但我们发现每个链底及其每棵子树对重链贡献的变化次数不会超过 $\\log$ 次，因此复杂度是 $O(n\\log^2 n)$ 的。\nCode // Code by ajcxsu // Problem: new year duck #include\u0026lt;bits/stdc++.h\u0026gt; using namespace std; typedef long long ll; const int N=1e5+10, OP=19; int gup[OP][N]; int h[N], to[N\u0026lt;\u0026lt;1], nexp[N\u0026lt;\u0026lt;1], p=1; inline void ins(int a, int b) { nexp[p]=h[a], h[a]=p, to[p]=b, p++; } int siz[N], dl[N], dr[N], idx; void dfs(int x, int fr) { siz[x]=1, dl[x]=++idx; for(int u=h[x];u;u=nexp[u]) if(to[u]!=fr) dfs(to[u], x), siz[x]+=siz[to[u]], gup[0][to[u]]=x; dr[x]=idx; } vector\u0026lt;int\u0026gt; add[N]; #define ls x\u0026lt;\u0026lt;1 #define rs x\u0026lt;\u0026lt;1|1 ll mi[N\u0026lt;\u0026lt;2], t[N\u0026lt;\u0026lt;2]; void pud(int x) { if(!t[x]) return; ll v=t[x]; mi[ls]+=v, mi[rs]+=v, t[ls]+=v, t[rs]+=v; t[x]=0; } void updata(int x, int l, int r, int xl, int xr, ll v) { if(xl\u0026lt;=l \u0026amp;\u0026amp; r\u0026lt;=xr) { mi[x]+=v, t[x]+=v; return; } pud(x); int mid=(l+r)\u0026gt;\u0026gt;1; if(xl\u0026lt;=mid) updata(ls, l, mid, xl, xr, v); if(xr\u0026gt;mid) updata(rs, mid+1, r, xl, xr, v); mi[x]=min(mi[ls], mi[rs]); } ll query(int x, int l, int r, int xl, int xr) { if(xl\u0026lt;=l \u0026amp;\u0026amp; r\u0026lt;=xr) return mi[x]; pud(x); int mid=(l+r)\u0026gt;\u0026gt;1; ll ret=1ll\u0026lt;\u0026lt;60; if(xl\u0026lt;=mid) ret=min(ret, query(ls, l, mid, xl, xr)); if(xr\u0026gt;mid) ret=min(ret, query(rs, mid+1, r, xl, xr)); return ret; } ll f[N]; int n; void addv(int x) { int fa=gup[0][x]; updata(1, 1, n, dl[x], dr[x], siz[x]); for(int u=h[x];u;u=nexp[u]) if(to[u]!=fa) updata(1, 1, n, dl[to[u]], dr[to[u]], -siz[to[u]]); } void dfs2(int x, int fr) { ll tot=0; for(int u=h[x];u;u=nexp[u]) if(to[u]!=fr) { dfs2(to[u], x); tot+=f[to[u]]+siz[to[u]]; } for(int u=h[x];u;u=nexp[u]) if(to[u]!=fr) { updata(1, 1, n, dl[to[u]], dr[to[u]], tot-f[to[u]]-siz[to[u]]); addv(to[u]); } updata(1, 1, n, dl[x], dl[x], tot); for(int y:add[x]) addv(y); f[x]=dl[x]==dr[x]?0:query(1, 1, n, dl[x], dr[x]); } int main() { ios::sync_with_stdio(false), cin.tie(0); int u, v; cin\u0026gt;\u0026gt;n; for(int i=0; i\u0026lt;n-1; i++) cin\u0026gt;\u0026gt;u\u0026gt;\u0026gt;v, ins(u, v), ins(v, u); dfs(1, 0); for(int j=1; j\u0026lt;OP; j++) for(int i=1; i\u0026lt;=n; i++) gup[j][i]=gup[j-1][gup[j-1][i]]; for(int j=0; j\u0026lt;OP; j++) for(int i=1; i\u0026lt;=n; i++) if(gup[0][gup[j][i]]) add[gup[0][gup[j][i]]].push_back(i); dfs2(1, 0); cout\u0026lt;\u0026lt;f[1]\u0026lt;\u0026lt;endl; return 0; } ","oriTitle":"UOJ462 新年的小黄鸭","tags":["线段树","树形dp"],"title":"UOJ462 新年的小黄鸭","uri":"/posts/sol-uoj-462/"},{"categories":["others"],"content":"$\\text{Hello world!}$ Here. 如果你找到这里了\u0026hellip;\n让我猜猜？\n你是看了我的github还是查了我的子域名？\nNext. 那么这里就是Inside Space。\n平常可能会在这里记录一些OI以外的内容。\n包括游戏、音乐、动画、漫画、小说、开发。\n而以上所提到的，我也在努力的进修中。\n关于Hugo和Canoe的这个主题，是受到了 margatroid 的影响。因为觉得这个很好看。所以也顺势弄了个Github Page，成就了我一向想要做里站的愿望。虽然是里站，但是还是不能放一些不可描述的H的东西呢（笑）\n以上。\nSomething left. 由于一些不可描述的技术原因，中文搜索功能暂不能使用。\n","oriTitle":"Inside Space","tags":["none"],"title":"Inside Space","uri":"/posts/my-first-post/"},{"categories":null,"content":"","oriTitle":"Archive","tags":null,"title":"Archive","uri":"/archive/"},{"categories":null,"content":"没有什么好说的。\n有人可能已经注意到了我的头像。\n主页的一个，或许还有gravatar的那一个。\n使用这两个头像的原因是因为我认为这些表情太可爱了x\n原图的话可能只有经常在p站翻奇怪东西的人才能找出来吧？\n博客标题并不是指某飞机型号\n","oriTitle":"About Me","tags":null,"title":"About Me","uri":"/about/"}]